service: codemarketapi

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  # websocketsApiName: codemarket-videochat-socket
  # websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    MONGODB_URL: ${file(env.yml):${self:provider.stage}.MONGODB_URL}
    MONGODB_DBNAME: ${file(env.yml):${self:provider.stage}.MONGODB_DBNAME}
    AWS_ACCESSKEY_ID: ${file(env.yml):${self:provider.stage}.AWS_ACCESSKEY_ID}
    AWS_SECRETKEY: ${file(env.yml):${self:provider.stage}.AWS_SECRETKEY}
    AWS_SES_REGION: ${file(env.yml):${self:provider.stage}.AWS_SES_REGION}
    AWS_COGNITO_REGION: ${file(env.yml):${self:provider.stage}.AWS_COGNITO_REGION}
    AWS_COGNITO_USERPOOL_ID: ${file(env.yml):${self:provider.stage}.AWS_COGNITO_USERPOOL_ID}
    FRONT_END_URL: ${file(env.yml):${self:provider.stage}.FRONT_END_URL}
    AWS_COGNITO_CLIENT_ID: ${file(env.yml):${self:provider.stage}.AWS_COGNITO_CLIENT_ID}
    SMTP_HOST: ${file(env.yml):${self:provider.stage}.SMTP_HOST}
    SMTP_PORT: ${file(env.yml):${self:provider.stage}.SMTP_PORT}
    SMTP_USER: ${file(env.yml):${self:provider.stage}.SMTP_USER}
    SMTP_PASSWORD: ${file(env.yml):${self:provider.stage}.SMTP_PASSWORD}
    FROM_EMAIL: ${file(env.yml):${self:provider.stage}.FROM_EMAIL}
    SOCKET_URL: ${file(env.yml):${self:provider.stage}.SOCKET_URL}
    STRIPE_SECRET_KEY: ${file(env.yml):${self:provider.stage}.STRIPE_SECRET_KEY}
functions:
  graphql:
    handler: handler.graphqlHandler
    # role: ServiceRole
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
  hello:
    handler: handler1.hello
    events:
      - http:
          path: hello
          method: GET
          cors: true

  checkoutSessionCompleted:
    handler: handler.checkoutSessionCompleted
    events:
      - http:
          path: checkoutSessionCompleted
          method: POST
          cors: true

  createCheckoutSession:
    handler: handler.createCheckoutSession
    events:
      - http:
          path: createCheckoutSession
          method: POST
          cors: true

  getCheckoutSession:
    handler: handler.getCheckoutSession
    events:
      - http:
          path: getCheckoutSession
          method: POST
          cors: true

  createStripeUser:
    handler: handler.createStripeUser
    events:
      - http:
          path: createStripeUser
          method: POST
          cors: true

  attachCardAndCreateSubscription:
    handler: handler.attachCardAndCreateSubscription
    events:
      - http:
          path: attachCardAndCreateSubscription
          method: POST
          cors: true

  getCouponByName:
    handler: handler.getCouponByName
    events:
      - http:
          path: getCouponByName
          method: POST
          cors: true

  # socketConnectionHandler:
  #   handler: websocket.socketConnectionHandler
  #   events:
  #     - websocket:
  #         route: $connect
  #     - websocket:
  #         route: $disconnect
  #     - websocket:
  #         route: $default
  
  # onOffer:
  #   handler: websocket.onOffer
  #   events:
  #     - websocket:
  #         route: onOffer

  # setUserOnline:
  #   handler: websocket.setUserOnline
  #   events:
  #     - websocket:
  #         route: setUserOnline

  # calling:
  #   handler: websocket.calling
  #   events:
  #     - websocket:
  #         route: calling


resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"

plugins:
  - serverless-offline
  # - serverless-domain-manager

custom:
  serverless-offline:
    port: 3200